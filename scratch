To-Do: Send query, plotly.js for graphs


import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { ArrowLeft } from "lucide-react";

export default function ModelSettings() {
  const router = useRouter();
  const { uid } = router.query;

  const [form, setForm] = useState(null);
  const [submitted, setSubmitted] = useState(false);
  const [loading, setLoading] = useState(true);
  const [loadError, setLoadError] = useState(false);

  useEffect(() => {
    if (!uid) return;
      console.log("here");
      console.log(uid);

    setLoading(true);
    setLoadError(false);

    fetch(`${uid}.json`)
        .then((res) => {
        if (!res.ok) throw new Error("Settings not found");
        return res.json();
      })
      .then((data) => setForm(data))
      .catch((err) => {
        console.error(err);
        setLoadError(true);
      })
          .finally(() => setLoading(false));
      console.log("here");
  }, [uid]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: Number(value) }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Submitted settings for", uid, form);
    setSubmitted(true);
  };

  if (loading) return <div className="p-10 text-center text-gray-500">Loading settings...</div>;

  if (loadError || !form)
    return (
      <div className="p-10 text-center text-red-600">
        ⚠️ Could not load settings for UID: <strong>{uid}</strong>
      </div>
    );

  return (
    <div className="min-h-screen bg-gray-50 px-4 py-10 sm:px-8">
      <div className="max-w-3xl mx-auto space-y-8">
        <button
          onClick={() => router.push("/")}
          className="inline-flex items-center px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition"
        >
          <ArrowLeft size={16} className="mr-2" />
          Back to Dashboard
        </button>

        <div className="text-center">
          <h1 className="text-3xl font-semibold text-gray-800">
            Model Settings for UID: <span className="text-blue-600">{uid}</span>
          </h1>
          <p className="text-sm text-gray-500 mt-1">Modify and save your model configuration</p>
        </div>

        <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow space-y-6 border">
          {Object.entries(form).map(([key, value]) => (
            <div key={key} className="flex flex-col">
              <label htmlFor={key} className="text-sm text-gray-700 font-medium capitalize">
                {key.replace(/_/g, " ")}
              </label>
              <input
                type="number"
                name={key}
                id={key}
                value={value}
                onChange={handleChange}
                className="mt-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
          ))}

          <div className="flex justify-end">
            <button
              type="submit"
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
            >
              Save Settings
            </button>
          </div>

          {submitted && (
            <p className="text-green-600 text-sm text-right">Settings saved (mock)!</p>
          )}
        </form>
      </div>
    </div>
  );
}


import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { ArrowLeft } from "lucide-react";

// dummy initial data per UID
const mockSettingsByUID = {
  timesteps_lstm: 10,
  threshold_lstm: 95,
  days_to_train_isolation: 15,
  days_to_train_lstm: 20,
};

export default function ModelSettings() {
  const router = useRouter();
  const { uid } = router.query;

  const [form, setForm] = useState({ ...mockSettingsByUID });
  const [submitted, setSubmitted] = useState(false);

    
  useEffect(() => {
    // In real version: fetch UID-specific config here
      setSubmitted(false);
      
  }, [uid]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: Number(value) }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // In real version: send this to API or update DB
    console.log("Updated settings for", uid, form);
    setSubmitted(true);
  };

  return (
    <div className="min-h-screen bg-gray-50 px-4 py-10 sm:px-8">
      <div className="max-w-3xl mx-auto space-y-8">
        <button
          onClick={() => router.push("/")}
          className="inline-flex items-center px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition"
        >
          <ArrowLeft size={16} className="mr-2" />
          Back to Dashboard
        </button>

        <div className="text-center">
          <h1 className="text-3xl font-semibold text-gray-800">Model Settings for UID: <span className="text-blue-600">{uid}</span></h1>
          <p className="text-sm text-gray-500 mt-1">Modify anomaly detection settings</p>
        </div>

        <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow space-y-6 border">
          {Object.entries(form).map(([key, value]) => (
            <div key={key} className="flex flex-col">
              <label htmlFor={key} className="text-sm text-gray-700 font-medium capitalize">
                {key.replace(/_/g, " ")}
              </label>
              <input
                type="number"
                name={key}
                id={key}
                value={value}
                onChange={handleChange}
                className="mt-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
            </div>
          ))}

          <div className="flex justify-end">
            <button
              type="submit"
              className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition"
            >
              Save Settings
            </button>
          </div>

          {submitted && (
            <p className="text-green-600 text-sm text-right">Settings saved!</p>
          )}
        </form>
      </div>
    </div>
  );
}
